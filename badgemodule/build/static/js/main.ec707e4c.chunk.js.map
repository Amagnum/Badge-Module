{"version":3,"sources":["frame-light.png","dumb-face.png","logo.png","components/BadgeModule.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","blazeface","require","BadgeModule","model","useState","setStatus","loaded","setLoaded","ready","setReady","success","setSuccess","showLoader","setShowLoader","file","setFile","crop","setCrop","image","setImage","width","height","canvasDim","setCanvasDim","a","load","console","log","badge","document","getElementById","badgectx","getContext","frame","dumb_face","drawImage","img","querySelector","toast","error","position","autoClose","naturalWidth","naturalHeight","warn","estimateFaces","results","result","x","parseFloat","topLeft","y","aspect","className","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","style","margin","onClick","click","type","accept","onChange","e","URL","createObjectURL","target","files","setTimeout","run","hidden","src","logo","alt","maxWidth","onImageLoaded","newCrop","canvas","createElement","scaleX","scaleY","Image","onload","clearRect","toDataURL","id","opacity","zIndex","PointerEvent","download","href","xmlns","viewBox","fill","d","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ec707e4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/frame-light.0caa4188.png\";","module.exports = __webpack_public_path__ + \"static/media/dumb-face.b3ed9657.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.3aa703f9.png\";","import React, { useState } from \"react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"@tensorflow/tfjs-backend-cpu\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport frame from \"../frame-light.png\";\r\nimport dumb_face from \"../dumb-face.png\";\r\nimport logo from \"../logo.png\"\r\n\r\nconst blazeface = require(\"@tensorflow-models/blazeface\");\r\n\r\nconst BadgeModule = () => {\r\n  const [status, setStatus] = useState(\"Loading Model\");\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [ready, setReady] = useState(false);\r\n  const [success, setSuccess] = useState(null);\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [crop, setCrop] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [canvasDim, setCanvasDim] = useState({width:1000,height:1000});\r\n  let model;\r\n  load();\r\n\r\n  async function load() {\r\n    \r\n    model = await blazeface.load();\r\n    setStatus(\"Model Loaded\");\r\n\r\n    const style = 'font-weight: bold; font-size: 30px;color: yellow; text-shadow: 3px 3px 0 rgb(217,31,38) ;padding : 50px ';\r\n\r\n    console.log('%c Hi You have found an easter egg 🥚, now find a way to report this to us!', style);\r\n        \r\n    if (!loaded) {      \r\n      let badge = document.getElementById(\"badge\");\r\n      let badgectx = badge.getContext(\"2d\");\r\n      let frame = document.getElementById(\"frame\");\r\n      let dumb_face = document.getElementById(\"dumb-face\");\r\n      badgectx.drawImage(dumb_face, 0, 0, badge.width, badge.height);\r\n      badgectx.drawImage(frame, 0, 0, badge.width, badge.height);\r\n      \r\n    }\r\n    setLoaded(true);\r\n  }\r\n\r\n  function handleFile(e) {\r\n    setFile(URL.createObjectURL(e.target.files[0]));\r\n    setTimeout(() => {\r\n      run();\r\n    }, 1000);\r\n  }\r\n\r\n  async function run() {\r\n    let img = document.querySelector(\"#temp-image\")\r\n\r\n    if (img.width === 0 || img.height === 0)\r\n    {\r\n      toast.error(\"Something is wrong\",{ position: \"bottom-center\",autoClose: 3000 })\r\n      return\r\n    }\r\n  \r\n    if (img.naturalWidth < 500 || img.naturalHeight < 500)\r\n    {     \r\n      toast.warn(\"Low resolution image, resizing badge to low dimensions\")\r\n      setCanvasDim({width:img.naturalWidth,height:img.naturalWidth})\r\n     \r\n    }\r\n    let results = await model.estimateFaces(\r\n      img,\r\n      false\r\n    );\r\n    if (results[0])\r\n    {\r\n      toast.success(\"shinning like a star ⭐\")\r\n      let result = results[0];\r\n      let x = parseFloat(result.topLeft[0]) - 50;\r\n      let y = parseFloat(result.topLeft[1]) - 50;\r\n      // console.log(x, y);\r\n      setCrop({\r\n        x: x,\r\n        y: y,\r\n        aspect: 1,\r\n        width: 300,\r\n        height: 300,\r\n      });\r\n\r\n      setReady(true);\r\n    }\r\n    else {\r\n      toast.warn(\"Can't detect your face 😞\")\r\n      setCrop({\r\n        x: 0,\r\n        y: 0,\r\n        aspect: 1,\r\n        width: 200,\r\n        height: 200,\r\n      });\r\n\r\n      setReady(true);\r\n    }\r\n   \r\n  }\r\n\r\n  const getCroppedImg = () => {\r\n    setReady(false);\r\n    setShowLoader(false)\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n    setReady(false);\r\n\r\n    let badge = document.getElementById(\"badge\");\r\n    let badgectx = badge.getContext(\"2d\");\r\n    let frame = document.getElementById(\"frame\");\r\n\r\n    let img = new Image();\r\n    img.onload = () => {\r\n      badgectx.clearRect(0, 0, canvas.width, canvas.height);\r\n      badgectx.drawImage(img, 0, 0,badge.width, badge.height);\r\n      badgectx.drawImage(frame, 0, 0, badge.width, badge.height);\r\n      setSuccess(badge.toDataURL(\"image/jpeg\"))\r\n    };\r\n    img.src = canvas.toDataURL(\"image/jpeg\");\r\n\r\n    toast.success(\"psst, you can download badge from here \", { position: \"bottom-right\",autoClose: 3000 })\r\n  };\r\n\r\n  function uploadImage() {\r\n    setShowLoader(true)\r\n    document.querySelector(\"input.profile-input\").click();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      \r\n      <div className={loaded ? \"done\" : \"overlay\"}>\r\n        <span>\r\n        <h3>Loading Model</h3>\r\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n        </span>\r\n      </div>\r\n\r\n         <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        style={{ width: \"200px\",margin:\"auto\" }}\r\n        />\r\n      <header>DSC WOW Badge Maker</header>\r\n\r\n      <div className=\"main-container\">\r\n        \r\n        <div className=\"input-panel\">\r\n\r\n          <div className=\"input\">\r\n            <label>Profile Picture</label>\r\n            <span>\r\n            <button className=\"button\" onClick={uploadImage}>Upload Image</button>\r\n              {showLoader && <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>}\r\n            </span>\r\n            {loaded && <input type=\"file\" accept=\"image/*\" onChange={handleFile} className=\"profile-input\" hidden />}\r\n            {/* <h4>Status : {status}</h4> */}\r\n            <h5>\r\n              An AI Powered Badge Maker to automatically suggest crop region depending on the face location. <br/> <br />\r\n              Powered by Tensorflow.js <br /> <br />\r\n              Build with ❤️ by DSC WOW Team\r\n\r\n            </h5>\r\n          </div>\r\n\r\n          <img src={logo} className=\"logo\" alt=\"DSC WOW Logo\"/>\r\n          \r\n        </div>\r\n\r\n        <div className=\"preview-panel\">     \r\n     \r\n          {ready && (\r\n            <div>\r\n              <div style={{ maxWidth: \"450px\", width: \"80vw\" }}>\r\n                <ReactCrop\r\n                  onImageLoaded={setImage}\r\n                  src={file}\r\n                  crop={crop}\r\n                  onChange={(newCrop) => setCrop(newCrop)}\r\n                  />\r\n              </div>\r\n              <button onClick={getCroppedImg} className=\"button\">Crop</button>\r\n            </div>\r\n          )}\r\n\r\n          <canvas id=\"badge\" width={canvasDim.width} height={canvasDim.height}></canvas>\r\n      {file && (\r\n        <img\r\n        src={file}\r\n        alt=\"temp\"\r\n        id=\"temp-image\"\r\n        style={{\r\n          maxWidth: \"450px\",\r\n          width: \"80vw\",\r\n          opacity: 0,\r\n          position: \"absolute\",\r\n          zIndex: \"-1\",\r\n          PointerEvent: \"none\",\r\n        }}\r\n        />\r\n        )}\r\n          <img src={frame} id=\"frame\" alt=\"\" hidden />\r\n          <img src={dumb_face} id=\"dumb-face\" alt=\"\" hidden />\r\n          \r\n\r\n          {success && \r\n            <a download=\"myBadge.jpg\" href={success}>\r\n            <div className=\"download-fab\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" fill=\"#fff\">\r\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\r\n              <path d=\"M16.59 9H15V4c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v5H7.41c-.89 0-1.34 1.08-.71 1.71l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.63-.63.19-1.71-.7-1.71zM5 19c0 .55.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1H6c-.55 0-1 .45-1 1z\"></path>\r\n            </svg>\r\n            </div>\r\n            </a>\r\n          }\r\n\r\n          \r\n      </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BadgeModule;\r\n","import React from \"react\";\n\nimport BadgeModule from \"./components/BadgeModule\";\n\nfunction App() {\n  return <BadgeModule />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}